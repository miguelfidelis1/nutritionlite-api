require("dotenv").config();
const { GoogleGenerativeAI } = require("@google/generative-ai");
const { poolConnect, sql } = require("../config/db.js");

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: process.env.GEMINI_MODEL });

const conversarComIA = async (req, res) => {
  const { mensagem } = req.body;
  const userId = req.user?.id || 1;

  if (!mensagem) {
    return res.status(400).json({ mensagem: "Envie uma mensagem para a IA!" });
  }

  try {
    let fichaInfo = "O usu√°rio n√£o possui ficha alimentar registrada.";
    let alimentosInfo = "";


    const pool = await poolConnect;

    const fichaResult = await pool
      .request()
      .input("usuario_id", sql.Int, userId)
      .query("SELECT TOP 1 * FROM fichaAlimentar WHERE usuario_id = @usuario_id");

    if (fichaResult.recordset.length > 0) {
      const ficha = fichaResult.recordset[0];
      fichaInfo = `O objetivo do usu√°rio √©: ${ficha.objetivo}.
Ele j√° consumiu ${ficha.total_kcal} kcal, ${ficha.total_proteina}g prote√≠nas, ${ficha.total_carboidratos}g carboidratos e ${ficha.total_gordura}g gorduras.`;
    }

    const alimentoResult = await pool
      .request()
      .input("nome", sql.VarChar, `%${mensagem}%`)
      .query("SELECT TOP 3 * FROM tbltacoNL WHERE nome_alimento LIKE @nome");

    if (alimentoResult.recordset.length > 0) {
      alimentosInfo = "Alimentos encontrados no banco:\n";
      alimentoResult.recordset.forEach((a) => {
        alimentosInfo += `- ${a.descricao}: ${a.kcal} kcal, ${a.proteina}g prote√≠nas, ${a.carboidrato}g carboidratos, ${a.gordura}g gorduras\n`;
      });
    }

    const prompt = `
Voc√™ √© Salus, um(a) nutricionista virtual inteligente, criado para promover sa√∫de, bem-estar e alimenta√ß√£o acess√≠vel.  
Responda com base apenas nas informa√ß√µes fornecidas abaixo.  
Seja amig√°vel, direto(a), objetivo(a) e evite usar linguagem t√©cnica demais.  
Sempre que poss√≠vel, leve em conta o objetivo nutricional do usu√°rio e os alimentos encontrados no banco de dados.  
N√£o invente dados externos, s√≥ quando necess√°rio ‚Äî foque no que foi informado!  
Se o usu√°rio n√£o tiver uma ficha alimentar, responda sugerindo criar uma ou continuar sem ela.  
Se o usu√°rio perguntar sobre algo fora de Nutri√ß√£o ou Sa√∫de, responda que n√£o foi programada para isso.  

------------------  
üìå Ficha do usu√°rio:  
${fichaInfo}  

üìå Alimentos encontrados:  
${alimentosInfo}  

‚ùì Pergunta do usu√°rio: ${mensagem}
    `;

    const result = await model.generateContent(prompt);
    const resposta = result.response.text();

    return res.status(200).json({ resposta });
  } catch (error) {
    console.error("Erro ao conversar com a IA:", error);
    return res.status(500).json({ mensagem: "Erro ao gerar resposta da IA." });
  }
};

module.exports = { conversarComIA };
