require("dotenv").config();
const { GoogleGenerativeAI } = require("@google/generative-ai");
const { poolConnect, sql } = require("../config/db.js");

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: process.env.GEMINI_MODEL });

const respostasComuns = [
  { pergunta: /ovo engorda\??/i, resposta: "N√£o, ovo √© uma √≥tima fonte de prote√≠na e n√£o engorda sozinho. O importante √© a quantidade e equil√≠brio na dieta." },
  { pergunta: /p√£o √† noite\??/i, resposta: "P√£o √† noite n√£o √© proibido, mas prefira integral e combine com prote√≠nas para saciedade." },
  { pergunta: /posso comer doces\??/i, resposta: "Pode sim, mas modera√ß√£o √© a chave. Prefira doces naturais, como frutas." },
  { pergunta: /quero perder peso/i, resposta: "Para perder peso, foque em d√©ficit cal√≥rico, prote√≠nas adequadas e escolha de alimentos nutritivos." },
  { pergunta: /quero ganhar massa/i, resposta: "Para ganhar massa, aumente prote√≠nas, carboidratos saud√°veis e mantenha treino regular." },
  { pergunta: /como aumentar prote√≠na/i, resposta: "Inclua ovos, carnes magras, peixes, leite, iogurte e leguminosas na sua dieta di√°ria." },
  { pergunta: /quanto devo beber de √°gua/i, resposta: "O ideal √© cerca de 2 litros por dia, ajustando conforme atividade f√≠sica e clima." },
  { pergunta: /melhor hor√°rio para treinar/i, resposta: "O melhor hor√°rio √© aquele que voc√™ consegue manter de forma consistente, seja manh√£, tarde ou noite." },
  { pergunta: /caf√© da manh√£ √© importante/i, resposta: "Sim, ele d√° energia para o dia, ajuda a controlar fome e melhora concentra√ß√£o." },
  { pergunta: /quanto comer de carboidrato/i, resposta: "Depende do seu objetivo, mas escolha carboidratos complexos como arroz integral, batata, quinoa e aveia." },
  { pergunta: /qual melhor lanche/i, resposta: "Frutas, iogurte natural, castanhas e sandu√≠ches integrais s√£o boas op√ß√µes de lanche saud√°vel." },
  { pergunta: /ovo ou frango/i, resposta: "Ambos s√£o √≥timas fontes de prote√≠na; escolha o que preferir e varie durante a semana." },
  { pergunta: /evitar gordura/i, resposta: "Evite gorduras trans e ultraprocessadas. Prefira azeite, abacate, oleaginosas e peixes." },
  { pergunta: /como ganhar energia/i, resposta: "Coma carboidratos complexos, prote√≠nas e mantenha hidrata√ß√£o adequada." },
  { pergunta: /ch√° ajuda a emagrecer/i, resposta: "Alguns ch√°s podem auxiliar na hidrata√ß√£o e metabolismo, mas n√£o substituem alimenta√ß√£o equilibrada." },
  { pergunta: /quantas refei√ß√µes por dia/i, resposta: "Geralmente 3 refei√ß√µes principais + 1-2 lanches saud√°veis, adaptando √† sua rotina." },
  { pergunta: /posso comer √† noite/i, resposta: "Pode, mas prefira refei√ß√µes leves, evitando grandes quantidades de carboidratos simples." },
  { pergunta: /iogurte faz bem/i, resposta: "Sim, principalmente natural, √© fonte de prote√≠nas e probi√≥ticos que auxiliam na digest√£o." },
  { pergunta: /frutas engordam/i, resposta: "N√£o, frutas s√£o saud√°veis e fornecem vitaminas, fibras e energia, desde que consumidas com modera√ß√£o." },
  { pergunta: /como evitar fome √† noite/i, resposta: "Inclua prote√≠nas e fibras no jantar; evite a√ß√∫car e alimentos ultraprocessados perto da hora de dormir." },
  { pergunta: /suco natural ou refrigerante/i, resposta: "Prefira sucos naturais sem a√ß√∫car. Evite refrigerantes, mesmo zero, que podem atrapalhar metabolismo e saciedade." },
  { pergunta: /o que √© dieta balanceada/i, resposta: "Uma dieta balanceada inclui prote√≠nas, carboidratos complexos, gorduras boas, fibras, vitaminas e minerais." },
  { pergunta: /alimentos processados/i, resposta: "Evite ultraprocessados ricos em a√ß√∫car, s√≥dio e gorduras ruins; prefira alimentos naturais e frescos." },
  { pergunta: /como aumentar massa muscular/i, resposta: "Treino de resist√™ncia + prote√≠nas suficientes + calorias adequadas s√£o a chave." },
  { pergunta: /como reduzir gordura/i, resposta: "D√©ficit cal√≥rico controlado + exerc√≠cios regulares + foco em alimentos nutritivos ajudam na redu√ß√£o de gordura." },
  { pergunta: /qual melhor prote√≠na/i, resposta: "Prote√≠nas magras como frango, peixe, ovos, leguminosas e latic√≠nios s√£o excelentes escolhas." },
  { pergunta: /melhor caf√©/i, resposta: "Prefira caf√© puro ou com pouco a√ß√∫car. Pode ajudar na energia e concentra√ß√£o, moderadamente." },
  { pergunta: /fast food faz mal/i, resposta: "Sim, em excesso contribui para obesidade, doen√ßas card√≠acas e altera√ß√µes metab√≥licas." },
  { pergunta: /como melhorar digest√£o/i, resposta: "Fibras, √°gua suficiente, probi√≥ticos e alimenta√ß√£o regular ajudam na digest√£o." },
  { pergunta: /suplemento necess√°rio/i, resposta: "Suplementos s√≥ se houver necessidade identificada por nutricionista ou m√©dico; alimenta√ß√£o completa √© prioridade." },
  { pergunta: /como controlar ansiedade por comida/i, resposta: "Planejamento de refei√ß√µes, lanches saud√°veis e t√©cnicas de respira√ß√£o podem ajudar a controlar a fome emocional." }
];


// Fun√ß√£o para salvar hist√≥rico
const salvarHistorico = async (usuarioId, mensagem, resposta, pool) => {
  await pool
    .request()
    .input("usuario_id", sql.Int, usuarioId)
    .input("mensagem", sql.NVarChar, mensagem)
    .input("resposta", sql.NVarChar, resposta)
    .query(`INSERT INTO chatHistorico (usuario_id, mensagem, resposta) 
            VALUES (@usuario_id, @mensagem, @resposta)`);
};

// Fun√ß√£o para buscar alimentos
const buscarAlimentos = async (mensagem, pool) => {
  const resultado = await pool
    .request()
    .input("nome", sql.VarChar, `%${mensagem}%`)
    .query("SELECT TOP 5 * FROM tbltacoNL WHERE nome_alimento LIKE @nome");

  if (resultado.recordset.length === 0) return [];
  return resultado.recordset.map(a => ({
    nome: a.nome_alimento,
    descricao: a.descricao,
    kcal: a.kcal,
    proteina: a.proteina,
    carboidrato: a.carboidrato,
    gordura: a.gordura
  }));
};

// Fun√ß√£o para formatar ficha
const formatarFicha = (ficha) => {
  if (!ficha) return "O usu√°rio n√£o possui ficha alimentar registrada.";
  return `Objetivo: ${ficha.objetivo}
Kcal consumidas: ${ficha.total_kcal}
Prote√≠nas: ${ficha.total_proteina}g
Carboidratos: ${ficha.total_carboidratos}g
Gorduras: ${ficha.total_gordura}g`;
};

const conversarComIA = async (req, res) => {
  const { mensagem } = req.body;
  const userId = req.user?.id || 1;

  if (!mensagem) {
    return res.status(400).json({ mensagem: "Envie uma mensagem para a IA!" });
  }

  try {
    // 1Ô∏è‚É£ Resposta pronta
    const respostaPronta = respostasComuns.find(item => item.pergunta.test(mensagem));
    if (respostaPronta) {
      return res.status(200).json({ resposta: respostaPronta.resposta });
    }

    const pool = await poolConnect;

    // 2Ô∏è‚É£ Buscar ficha do usu√°rio
    const fichaResult = await pool
      .request()
      .input("usuario_id", sql.Int, userId)
      .query("SELECT TOP 1 * FROM fichaAlimentar WHERE usuario_id = @usuario_id");
    const fichaInfo = fichaResult.recordset.length > 0 ? formatarFicha(fichaResult.recordset[0]) : formatarFicha(null);

    // 3Ô∏è‚É£ Buscar alimentos no banco
    const alimentos = await buscarAlimentos(mensagem, pool);
    let alimentosInfo = alimentos.length > 0
      ? "Alimentos encontrados no banco:\n" + alimentos.map(a => `- ${a.descricao}: ${a.kcal} kcal, ${a.proteina}g prote√≠nas, ${a.carboidrato}g carboidratos, ${a.gordura}g gorduras`).join("\n")
      : "";

    // 4Ô∏è‚É£ Montar prompt e enviar para IA
    const prompt = `
Voc√™ √© Salus, um(a) nutricionista virtual inteligente, criado para promover sa√∫de, bem-estar e alimenta√ß√£o acess√≠vel.  
Responda com base apenas nas informa√ß√µes fornecidas abaixo.  
Seja amig√°vel, direto(a), objetivo(a) e evite usar linguagem t√©cnica demais.  
Sempre que poss√≠vel, leve em conta o objetivo nutricional do usu√°rio e os alimentos encontrados no banco de dados.  
N√£o invente dados externos, s√≥ quando necess√°rio ‚Äî foque no que foi informado!  
Se o usu√°rio n√£o tiver uma ficha alimentar, responda sugerindo criar uma ou continuar sem ela.  
Se o usu√°rio perguntar sobre algo fora de Nutri√ß√£o ou Sa√∫de, responda que n√£o foi programada para isso.

------------------  
üìå Ficha do usu√°rio:  
${fichaInfo}  

üìå Alimentos encontrados:  
${alimentosInfo}  

‚ùì Pergunta do usu√°rio: ${mensagem}
    `;

    const result = await model.generateContent(prompt);
    const resposta = result.response.text();

    // 5Ô∏è‚É£ Salvar hist√≥rico
    await salvarHistorico(userId, mensagem, resposta, pool);

    return res.status(200).json({ resposta });
  } catch (error) {
    console.error("Erro ao conversar com a IA:", error);
    return res.status(500).json({ mensagem: "Erro ao gerar resposta da IA." });
  }
};

module.exports = { conversarComIA };
